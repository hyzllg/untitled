#分析浏览器开发者工具中Elements和network这两个选项卡对应的页面源码数据有何不同之处
#elenments中包含的显示的页面源码数据为当前页面所有的的数据加载完毕后对应的万丈的页面源码数据（包含了加载的动态加载数据）
#network显示的页面源码数据仅仅为某一个单独的请求对应的响应数据（不包含动态加载的数据）
#如果在进行数据解析的时候，一定是需要对页面布局进行分析如果当前网站没有动态加载的数据就可以直接使用Elements对页面布局进行分析，否则只可以使用network对页面数据进行分析



数据解析的作用？
    用来实现聚焦爬虫
网页中显示的数据都是存储在哪里？
    都是存储在html的标签中或者是标签的属性中
数据解析的通用原理是什么？
    指定标签的定位
    取出标签中存储的数据或则标签属性中的数据

##bs4
bs4解析原理
    实例化一个BeautifulSoup的对象，且将待解析的页面源码数据加载到该对象中
    调用BeautifulSoup对象中相关方法或则属性进行标签定位和文本数据的提取
环境安装
    pip install lxml #解析器
    pip install bs4
Beautifulsoup对象的实例化：
    Beautifulsoup(fp,'lxml'):用来将本地储存的html文档中的数据进行解析
    Beautifulsoup（page_text,'lxml'):用来将互联网中请求到的页面源码数据进行解析
标签定位
    soup.tagName:只可以定位到第一次出现的tagname标签
    soup.find('tagname',attrname='value'):属性定位
    soup.findall:跟find一样用作属性定位，只不过findall返回的是列表
    soup.select('选择器'):选择器定位
        类选择器
        id选择器
        层级选择器
            > : 表示一个层级
            空格 : 表示多个层级
取数据
    .text : 返回的是该标签下所有的文本内容
    .string : 返回的是该标签直系的文本内容
取属性
    tag['attrname']


xpath解析
环境安装
    -pip install lxml
解析原理：html标签是以树状的形式进行展示
    -实例化一个etree的对象，且将带解析的页面源码数据加载到该对象中
    -调用etree对象的xpath方法结合着不同的xpath表达式实现标签的定位和数据提取
实例化etree对象
    -etree.parse('filename'):将本地html文档加载到该对象中
    -etree.HTML(page_text):网站获取的页面数据加载到该对象
标签定位：
    -最左侧的/（忽略此种方法）：如果xpath表达式最左侧是以/开头则表示该xpath表达式一定要从根标签开始定位指定标签
    -非最左侧/：表示一个层级
    -非最左侧//：表示多个层级
    -最左侧的//：xpath表达式可以从任意位置进行标签定位
    -属性定位：tagname[@attrname='value']
    -索引定位：tag[index]:索引是从1开始
    -模糊匹配：
        -//div[contains(@class,'ng)]
        -//div[starts-with(@class,'tg')]
取文本
    -/crawler():直系文本内容
    -//crawler():全部文本内容
取属性
    -/@attrname

xpath表达式如何更加具有通用性？
    在xpath表达式中使用管道符分隔符的作用，可以表示管道符左右两侧的
    子xpath表达式同时生效或则一个生效


站长素材高清图片下载
    反爬机制：图片懒加载，广泛应用在了一些图片的网站中
        只有当图片被显示在浏览器可视化范围内才会将img的伪属性变成真正的属性，如果是requests发起的请求，
        requests请求是没有可视化范围，因此我们一定要解析的是img伪数据的属性值（图片地址）
学过的反爬机制
    robots
    ua伪装
    动态加载数据的捕获
    图片懒加载


*cookie
*代理机制
*验证码的识别
*模拟登录

-cookie
    是存储在客户端的一组键值对
    web中cookie的典型应用
        -免密登录
    cookie和爬虫之间的关联
        -sometimes，对一张页面进行请求的时候，如果请求的过程中不携带
         cookie的话，那么我们是无法请求到正确的页面数据，因此cookie是爬虫中一个非常典型且常见的反爬机制

-代理操作
    -在爬虫中，所谓的代理指的是什么？
        -就是代理服务器
    -代理服务器的作用是什么？
        -就是用来转发请求和响应
    -在爬虫中为什么需要使用代理服务器？
        -如果我们的爬虫在短时间内对服务器发起了高频的请求，那么服务器会检测到这样的一个异常的行为请求，就会将该请求对应设备的ip禁掉，就以为client设备
         无法对该服务器再次进行请求发送（ip被禁掉了）
        -如果ip被禁，我们就可以使用代理服务器进行请求转发，破解ip被禁的反扒机制，因为使用代理后，服务器链接受到的请求对应的ip地址就是代理服务器而不是我们真正的客户端的
    -代理服务器分为不同的匿名度：
        -透明代理：如果使用了该形式的代理，服务端就知道你使用了代理机制也知道你的真实ip
        -匿名代理：如果你使用代理，但是不知道你的真实ip
        -高匿代理：不知道你使用了代理也不知道你的真实ip
    -代理的类型
        -https：代理只能转发https协议的请求
        -http：转发http的请求
    -代理服务器：
        -快代理
        -西祠代理
        -goubanjia
        -代理精灵 http://zhiliandaili.cn/



-需求：爬取雪球网站中的咨询信息 https://xueqiu.com/
-分析
    -判定爬取的咨询数据是否为动态加载的
        -相关的更多咨询数据是动态加载的，滚轮滑动到底部的时候会动态加载出更多的咨询数据
    -定位到ajzx请求的数据包，提取出请求的url，响应数据为json形式的咨询数据
        {'error_description': '遇到错误，请刷新页面或者重新登录帐号后再试', 'error_uri': '/statuses/hot/listV2.json', 'error_data': None, 'error_code': '400016'}
        -问题：我们没有请求到想要的数据
        -原因：我们没有严格意义上模拟浏览器发请求
            -处理：可以将浏览器发请求携带的请求头，全部粘贴在headers字典中，将headers作用到requests的请求操作中即可
            -cookie的处理方式
                -方式一：手动处理
                    -将抓包工具中cookie粘贴在headers中
                    -弊端：cookie如果过了有效时常则该方式失效
                -方式二：自动处理
                    -基于session对象实现自动处理
                    -如何获取一个session对象：requests.Session()返回一个session对象
                    -session对象的作用：
                        -该对象可以向requests一样调用get和post发起指定的请求，只不过如果在使用session发请求的过程中如果产生了cookie，
                         则cookie会被自动储存到该session对象中，那么就意味着下次再次使用session对象发起请求，则该次请求就是携带cookie进行的请求发送
                        -在爬虫中使用session的时候，session对象至少会被使用几次？
                         -两次 第一次使用session是为了将cookie捕获且储存到session对象中，下次的时候就是携带cookie进行的请求发送





-验证码的识别
	-基于线上的打码平台识别验证码
	-打码平台
		-1、超级鹰
			-1、注册
            -2、登录
                -1、查询余额，充值
                -2、创建一个软件ID
                -3、下载示例代码
		-2、云打码
		-3、打码兔

'''
'''
-模拟登录
    -流程
        -对点击登录按钮对应的请求进行发送（post请求）
        -处理请求参数
            -用户名
            -密码
            -验证码
            -其他的防伪参数
-在请求参数中如果看到了一组乱序的请求参数，最好取验证码这组请求参数是否为动态化
    -处理
        方式一：常规来讲一般动态变化的请求参数会被隐藏在前台页面中，那么我们就要去前台页面源码中去找
        方式二：如果前台页面如果没有的话，我们就可以基于抓包工具进行全局搜索


-基于百度AI实现的爬虫功能
    -图像识别
    -语音识别&合成
    -自然语言处理

-使用流程：
    -点击控制台进行登录
    -选择想要实现的功能
    -实现功能下创建一个app
    -选择对应的pythonSDK文档进行代码实现




Flask基本使用
    -环境安装：pip install flask
    -创建一个py源文件
线程池
    -from multiprocessing.dummy import Pool
    -map(callback,alist)
        -可以使用callback对alist中的每一个元素进行指定形式的异步操作

-单线程+多任务异步协程 pip install asyncio
    -特殊的函数
    -协程对象
    -任务对象
    -时间循环对象